https://api.github.com/repos/python/cpython,110951,issue-67565-2::main,0,merged,tests::skip news::needs backport to 3.11::needs backport to 3.12::,"<!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` gh-NNNNN: Summary of the changes made ``` Where: gh-NNNNN refers to the GitHub issue number. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `main`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `main`. --> <!-- gh-issue-number: gh-67565 --> * Issue: gh-67565 <!-- /gh-issue-number --> ::",Furkan Onder,24194934,264,2,29,0,3,1,61d38946fd4bf23d7c53a8c1ecd0fb9d93eea9c5::b07cd39185b5029b9d82b5526a9d65e2552ce024::
https://api.github.com/repos/python/cpython,110868,issue-110864::main,0,merged,needs backport to 3.12::,"This fix feels like a hack (basically as any other argument parsing fix) :) But, it seems to be semantically correct, do its job, pass tests. <!-- gh-issue-number: gh-110864 --> * Issue: gh-110864 <!-- /gh-issue-number --> ::",Nikita Sobolev,4660275,4663,1,130,2,5,1,c4ca210f12a18edbe30b91aeb6e1915d74936caf::
https://api.github.com/repos/python/cpython,110790,asyncio_clear_watcher_threads::main,0,closed,tests::topic-asyncio::awaiting core review::skip news::needs backport to 3.11::needs backport to 3.12::,"ThreadedChildWatcher._join_threads() now clears references to completed threads. test_asyncio.utils.TestCase now calls _join_threads() of the watcher, uses SHORT_TIMEOUT to join a thread, and then raises an exception if there are still running threads. Rename also ThreadedChildWatcher threads to add ""asyncio-"" prefix to the name. <!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` gh-NNNNN: Summary of the changes made ``` Where: gh-NNNNN refers to the GitHub issue number. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `main`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `main`. --> <!-- gh-issue-number: gh-110205 --> * Issue: gh-110205 <!-- /gh-issue-number --> ::Why are you creating a new instance variable `self.threads` here? Did you intend to clean out completed threads from the dict `self._threads`?::I used the list comprehension above as an example, for me it looks easier to remove completed threads rather than having a regular list and removing items from the list. The purpose of this line is to remove completed threads to save memory and to fix the dangling threads issue.::Do you mean that you prefer to not create a new list?::I modified my PR to use ``self.threads[:] = ...``, so the self.threads list object is not replacd.::As I was trying to let you see for yourself, `self._threads` is a dict, not a list. If you want to update it using a comprehension you can use something like this: ``` self._threads = {key: thread for key, thread in self._threads.items() if thread.daemon or thread.is_alive()} ``` Please test locally before merging.::> Do you mean that you prefer to not create a new list? No I meant that the tests fail because `self._threads` is a dict, not a list.::",Victor Stinner,194129,1148,3,13,6,2,0,d414ed266bfc747d03ea9044ea0f662e2b388f1c::f161daafc1d9be2a96c6486f3924dabfb63eda76::dbbad2d163f835e06514a465d33b3d34c0d42c58::
https://api.github.com/repos/python/cpython,110732,backport-732532b-3.12::3.12,0,merged,skip news::needs backport to 3.11::,(cherry picked from commit 732532b0af9d1b5c7ae4932526c8d20d86c15507) <!-- gh-issue-number: gh-108303 --> * Issue: gh-108303 <!-- /gh-issue-number --> ::,Nikita Sobolev,4660275,4663,2,15,7,11,1,f0002feede8acf7c4166f9234e6d72787e606215::e6cd31754c93a78160c14ff266cb528ff47f910c::
https://api.github.com/repos/python/cpython,110653,no-pre-commit-for-you::main,0,closed,awaiting review::skip news::needs backport to 3.12::,"<!-- gh-issue-number: gh-110652 --> * Issue: gh-110652 <!-- /gh-issue-number --> ::Also works without the `./`, any preference? ```suggestion entry: 'Tools/patchcheck/reindent.py --nobackup --newline LF' ```::```suggestion entry: ""Tools/patchcheck/untabify.py"" ```::It's cleaner without the `./`::",Erlend E. Aasland,13780613,72,2,4,4,1,0,6509e94959cdd2c9eb312ef8990bf877c8cac6a9::9501fab02da6da722b3cc4df3c8a55b89891b766::
https://api.github.com/repos/python/cpython,110630,issue-110525-internal::main,0,merged,skip news::needs backport to 3.12::,"<!-- gh-issue-number: gh-110525 --> * Issue: gh-110525 <!-- /gh-issue-number --> ::You can use `Py_BuildValue(""nOn"", count, item, (Py_ssize_t)h)`. It will save 11 lines of code.::On other hand, why return `count`?::I would write test similarly to the test for `PyDict_Next()` -- implement a wrapper for single step and call it repeatedly in Python code.::```suggestion Py_hash_t hash = (Py_hash_t)UNINITIALIZED_SIZE; ```::What if it returns 2 or -2? ```suggestion if (rc != 0 && rc != -1) { ```::```suggestion if (rc == -1) { ``` Otherwise returning -1 without setting error will pass unnoticing.::```suggestion assert(item == UNINITIALIZED_PTR); assert(hash == (Py_hash_t)UNINITIALIZED_SIZ); ```::The key, its hash, and pos are the same. It is easy to make mistake in test and compare wrong value. Could you use strings? As a bonus, you will get different order and hashes on every run.::It is meaningless, because it is created by the wrapper, not the tested C API.object.::Also store items, and compare the accumulated result with `list(instance)`. It will test that 1. All items are yielded. 2. Every item was yielded only once. 3. The order of iteration is the same as in normal iteration (and not reversed order or insertion order, for example).::Sorry, I don't understand this one. Right now it is defined as: https://github.com/python/cpython/blob/66a9b1082049855889854bfde617059499c26dd2/Objects/setobject.c#L2332-L2346 It cannot return anything except `[-1, 0, 1]`. Do you mean that it can return something other than `[-1, 0, 1]` in the future? I think that our test case must catch this change and be adapted if needed. This function is not documented currently.::The purpose of the test is to verify our assumptions (that it cannot return anything except [-1, 0, 1]). Otherwise there would not be need of tests. In future a new return can be added in the code, or refactoring can lead to returning non-initialized variable in rare case. The wrapper will successfully return None.::Got it, I used an assertion, which is more readable in my opinion üëç ::",Nikita Sobolev,4660275,4663,4,117,3,6,1,f82ca467553e84647aa3a64985528248af6ea67c::338d340eaac7b42f377b184474e74bae2a42b527::21ca91f6fea7d6edbe8ff9765c881d146b8741a1::e4ff92bd88d344fc5b2a3f3390fc69b4ba684a46::
https://api.github.com/repos/python/cpython,110448,makefile::main,0,closed,needs backport to 3.11::needs backport to 3.12::,"On FreeBSD when Python is built out of tree, the ""python"" program was created in the source directory instead of build directory. Fix the Makefile to write the ""python"" program in the build directory. <!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` gh-NNNNN: Summary of the changes made ``` Where: gh-NNNNN refers to the GitHub issue number. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `main`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `main`. --> <!-- gh-issue-number: gh-103053 --> * Issue: gh-103053 <!-- /gh-issue-number --> ::",Victor Stinner,194129,1148,1,8,1,2,0,d985a7113ed54f114c80d511c3876101ade70c7c::
https://api.github.com/repos/python/cpython,110374,macOS-SQLite-installer-upgrade::main,0,closed,awaiting core review::needs backport to 3.11::needs backport to 3.12::,"I updated the macOS SQLite installer, all changes were made in the build-installer.py file. I'll be doing the Windows installer next in a separate PR as requested. <!-- gh-issue-number: gh-109286 --> * Issue: gh-109286 <!-- /gh-issue-number --> ::Please revert these style changes. _Only change line 362, 363, and 364._ See the following PRs for earlier SQLite version bumps; **your PR should look very similar to these**: - gh-104624 - gh-102998 - gh-98639::```suggestion Update macOS installer to use SQLite 3.43.1. ```::```suggestion extra_cflags=('-Os ' '-DSQLITE_ENABLE_FTS5 ' '-DSQLITE_ENABLE_FTS4 ' '-DSQLITE_ENABLE_FTS3_PARENTHESIS ' '-DSQLITE_ENABLE_RTREE ' '-DSQLITE_OMIT_AUTOINIT ' '-DSQLITE_TCL=0 ' ```::",,76231120,0,8,4,3,2,0,4052bc9647217efa2c61f3c89fa0980db77d563d::ddf8d68e0e882129e5769d1479b0bee89d504b09::c659e4c5af231a0a9b23a37442ecf30d30e3b699::ef003dbcd2e3e89a6bbba47e2dd9964087a6923d::3e9ae8fd4a980bacd707e3c1f810e39c42d0e5f6::ee7cf756422c41156e30e4946733c7f15d9c75d0::aaa2d52ee7b763b7232256e9ee08312f5cc9f6b7::a5b31ace51091a5d53d243d29b30bc612395f362::
https://api.github.com/repos/python/cpython,110336,asyncio_clean_multiprocessing::main,0,merged,tests::skip news::needs backport to 3.11::,"test_unix_events tests using the multiprocessing module now call multiprocessing.util._cleanup_tests(). <!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` gh-NNNNN: Summary of the changes made ``` Where: gh-NNNNN refers to the GitHub issue number. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `main`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `main`. --> <!-- gh-issue-number: gh-110335 --> * Issue: gh-110335 <!-- /gh-issue-number --> ::",Victor Stinner,194129,1148,1,8,0,1,1,d9a9365816de324e5e4e1f07974626f74632871b::
https://api.github.com/repos/python/cpython,110125,test_mmap_comment::main,0,merged,tests::skip news::needs backport to 3.12::,"<!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` gh-NNNNN: Summary of the changes made ``` Where: gh-NNNNN refers to the GitHub issue number. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `main`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `main`. --> <!-- gh-issue-number: gh-107888 --> * Issue: gh-107888 <!-- /gh-issue-number --> ::",Victor Stinner,194129,1148,1,1,1,1,1,24c06ced66dcfce8d8813c5d8b0972cee02a35f6::
https://api.github.com/repos/python/cpython,110090,gh-109991-3.10::3.10,0,merged,type-security::OS-windows::needs backport to 3.8::needs backport to 3.9::,"Requesting RM signoff on the new policy I've invented in the NEWS entry @pablogsal @ambv Walking a thin line between ""we don't ship binaries"" and ""we still apply security fixes"", but I think this one fits our policy best. <!-- gh-issue-number: gh-109991 --> * Issue: gh-109991 <!-- /gh-issue-number --> ::```suggestion end of life and no future fixes will be made, and this version of Python is ``` We might also mention that there will be no more installers produced for this version?::I thought the wording got a bit awkward when I tried to talk about installers, because anyone can create an installer if they like. Trying to say ""the core Python team won't upload new installers to python.org, just like every other time"" really didn't work.::Fair enough :)::",Steve Dower,1693688,360,2,8,4,3,1,05a837bd3e7c75fdf59fe8edc484e376e3844702::cc4dae984d7aafb3883d35ef4f2b9b86a7cafaf1::
https://api.github.com/repos/python/cpython,110002,gh-109991-openssl3011-cli::main,0,merged,needs backport to 3.11::,<!-- gh-issue-number: gh-109991 --> * Issue: gh-109991 <!-- /gh-issue-number --> ::,Ned Deily,5833005,142,1,9,7,3,1,7d5e13a9f32636f371d59f2db35df073d906fe27::
https://api.github.com/repos/python/cpython,109968,issue-109961::main,0,merged,docs::skip news::needs backport to 3.11::needs backport to 3.12::,"This is how it looks now: <img width=""796"" alt=""–°–Ω–∏–º–æ–∫ —ç–∫—Ä–∞–Ω–∞ 2023-09-27 –≤ 16 22 12"" src=""https://github.com/python/cpython/assets/4660275/77e53cbb-c327-49db-a9a3-10a40b0dc807""> I've also added `__copy__` and `__deepcopy__` definitions, so they can be referenced. Refs https://github.com/python/cpython/issues/101100 <!-- gh-issue-number: gh-109961 --> * Issue: gh-109961 <!-- /gh-issue-number --> <!-- readthedocs-preview cpython-previews start --> ---- :books: Documentation preview :books:: https://cpython-previews--109968.org.readthedocs.build/ <!-- readthedocs-preview cpython-previews end -->::But please keep `:noindex:`. There are already entries for `__replace__` etc, and duplicates that refer to the same target are confusing.::Hm, when adding `noindex` it starts to fail `nitpick` mode: ``` /Users/sobolev/Desktop/cpython/Doc/library/copy.rst:90: WARNING: py:meth reference target not found: object.__copy__ /Users/sobolev/Desktop/cpython/Doc/library/copy.rst:90: WARNING: py:meth reference target not found: object.__deepcopy__ /Users/sobolev/Desktop/cpython/Doc/library/copy.rst:112: WARNING: py:meth reference target not found: object.__replace__ ```::With two indexes we have: <img width=""302"" alt=""–°–Ω–∏–º–æ–∫ —ç–∫—Ä–∞–Ω–∞ 2023-09-27 –≤ 17 55 22"" src=""https://github.com/python/cpython/assets/4660275/4101d626-797d-4ea1-81f2-2387f5c8d76a""> They link to: - `copy.html#copy.object.__replace__` - `copy.html#index-2` Do we need the `index` directive itself now?::You could consider [``:noindexentry:``](https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#basic-markup)? A::It generated just one link in `index.html`: `copy.html#index-2` No warnings üëç Thanks, TIL about `noindexentry` :)::This answers a question I had: with noindexentry, can we still link to the method. I just hope it‚Äôs not indexed as `copy.object` instead of `builtins.object`!::Of course, it is `copy.object`. https://cpython-previews--109968.org.readthedocs.build/en/109968/library/copy.html#copy.object.__replace__ You need to add `.. currentmodule:: .` to make it builtin.::",Nikita Sobolev,4660275,4663,3,21,13,2,1,dd1bbb5c271616e22d31ce20ec0d43e674f949e3::15de5b9e7a5a5063b95691e508bcec0b7fbb6f68::e9ea5140d4a500990f341344536ce2d748cd222b::
https://api.github.com/repos/python/cpython,109953,patch-1::main,0,closed,docs::skip issue::awaiting core review::skip news::needs backport to 3.11::needs backport to 3.12::,"`decimal.Decimal.exp()` was introduced in Python 2.6. This snippet is almost redundant, cause the native one should be more proper in most cases. <!-- readthedocs-preview cpython-previews start --> ---- :books: Documentation preview :books:: https://cpython-previews--109953.org.readthedocs.build/ <!-- readthedocs-preview cpython-previews end -->::",,3125695,18,1,0,24,1,0,b1b37774396d6ec2e690bc34eefc15ed8fb6763c::
https://api.github.com/repos/python/cpython,109807,docs/whatsnew-3.12-sync::main,0,merged,docs::skip issue::skip news::,A post main merge edit to the text was added in the 3.12 backport PR. https://github.com/python/cpython/pull/109773/commits/e38d7104b8f245e5db6d487932c44edf0d2c4762 This includes that in main.  It's a minor edit over #109767 to resolve the comment there. <!-- readthedocs-preview cpython-previews start --> ---- :books: Documentation preview :books:: https://cpython-previews--109807.org.readthedocs.build/ <!-- readthedocs-preview cpython-previews end -->::,Gregory P. Smith,68491,234,1,3,1,1,0,aa753f72452d4a6aa9ff05dc4207a9e3a7a51a3d::
https://api.github.com/repos/python/cpython,109780,gh-109370::main,0,merged,type-bug::skip news::needs backport to 3.12::,"Follow-up of gh-107219. * Only close the connection writer on Windows. * Also use existing constant _winapi.ERROR_OPERATION_ABORTED instead of WSA_OPERATION_ABORTED. <!-- gh-issue-number: gh-109370 --> * Issue: gh-109370 <!-- /gh-issue-number --> ::Why is it an issue on other platforms? See also PR gh-109810 which goes further in terminate_broken(), to try harder to close everything, and terminate the child processes.::Because of scenarios described in https://github.com/python/cpython/pull/109397#discussion_r1334943876. It is not possible to safely close a file descriptor in other thread without using some kind of locking, and it is difficult if possible without rewriting the way the GIL or all IO works even to use locking. It may be lesser issue on Windows (if handles are never reused, I do not know if it is so), but I am not sure that it is bug-free there. It may be simply that bugs are rarely manifested on Windows because most time the queue thread spends in `WaitForMultipleObjects()`.::> It is not possible to safely close a file descriptor in other thread without using some kind of locking It's maybe time to add ""some kind of locking"". There are two cases: * Thread B sets the file descriptor / handle to None, and then close FD / handle. No other thread was using it, no problem. Next, when thread A tries to use it, ""closed FD/handle"" exception is raised. * Thread B closes the FD/handle while thread A is using it. That's an important use case to be able to unblock multiprocessing when it goes into troubles with a sick worker progress, sick manager process, well, when things ""go wrong"". For me, the case that we should care about is terminate_broken() of concurrent.futures ProcessPoolExecutor and the associated BrokenProcessPool exception. When everything goes wrong, we should just cleanup resources: terminate processes, close queue, close file descriptors/handles, etc. I don't think that we can still expect worker processes to handle ""please stop"" commands from the main process. For example, PR #109810 is when the executor cannot even create new threads. In that case, multiprocessing and concurrent.futures cannot work properly, and it's time to exit as soon as possible.::> It's maybe time to add ""some kind of locking"". Actually, I do not think how is it possible, even with cooperation with GIL. It needs a support in the kernel to allow switching to other thread only when a system call waits. We can reduce the window for race condition, but it will always be possible with some small probability to close and replace file descriptor just before system call. > There are two cases: There are many other cases, depending on definition of ""use it"". If the file descriptor is closed or the attribute is set to None between the place where you can realistically check this and the place where it is used, you have an unsolvable problem. For now, I am worried about regression introduce by #107219 on non-Windows platforms. Since the original issue was Windows-only, I prefer to apply the solution (even if it may be non-perfect) on Windows where it fixes serious issue and not apply it other platforms where it seems unnecessary but causes visible regression.::",Serhiy Storchaka,3659035,401,1,3,3,2,1,3030774c40ca19bd946dead9780e1a2086a8579a::
https://api.github.com/repos/python/cpython,109745,random_docstrings::main,0,merged,docs::skip issue::skip news::needs backport to 3.11::,"Add the expected mean and variance to the docstrings.  It helps with understanding the parameters which is important because conventions vary.  Also, it would save someone like me from having to look these up periodically.::Should we note that this is the mean, for users that might be unfamilliar with the expectation operator? ```suggestion (mean): E[X] = (a + b) / 2 ```::",Raymond Hettinger,1623689,3560,7,34,5,1,1,b66783bb031a66c2ba6ed1ba9f828a015ede616d::d30c2153c62adc2459d7610d894691445b341c7b::0aecb973838ad5c037843508ccaf140a1de317c8::c17d2eb466680405018e4cd1d8420ca53bfdd4e5::75d96b1cecaa00cc73cf26a8bf07f8ad2e7a658d::6703fad3b66f1e6e997c021566ce90471333bdb4::a99a800c9186e1dffbd71ee14c0e782229c39da1::
https://api.github.com/repos/python/cpython,109620,mp_ensure_running::main,0,closed,needs backport to 3.11::needs backport to 3.12::,"multiprocessing: Reduce the risk of reentrant calls to ResourceTracker.ensure_running() by running explicitly all finalizers before acquiring the ResourceTracker lock. <!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` gh-NNNNN: Summary of the changes made ``` Where: gh-NNNNN refers to the GitHub issue number. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `main`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `main`. --> <!-- gh-issue-number: gh-109593 --> * Issue: gh-109593 <!-- /gh-issue-number --> ::",Victor Stinner,194129,1148,1,12,0,2,0,d11bc95c68f7234a40eefeb37531700cc46b1463::
https://api.github.com/repos/python/cpython,109607,issue-108303-inspect::main,0,merged,tests::skip news::needs backport to 3.11::,"This PR also moves `ready_to_import` helper to `test/support/import_helper`, because `test_inspect` was importing `test_import`, which is not good at all. <!-- gh-issue-number: gh-108303 --> * Issue: gh-108303 <!-- /gh-issue-number --> ::```suggestion else: sys.modules.pop(name, None) ```::Is it really important to create a temporary directory?::I personally find this a little hard to read. Is it a list of steps being followed? With no punctuation or capital letters I can't tell where something starts and another things begins.::This is not my code, I just moved it :) But, I can totally make it better, since I touch it anyway üëç ::No idea :)::So, I would prefer to keep it as-is (general semantics).::Thanks!::Can you use relative imports? From . import...::You don't have to change this code to look in parent directory?::No :) This module was excluded from this test explicitly here. But, since now it is not a module, but a package - we can safely remove the ignore rule here.::Ah wait, this file is not moved into test_inspect/, we are good, ok. Nevermind.::@serhiy-storchaka: It would be nice if we could magically generate such function, instead of having to duplicate the same 4 lines in each test_xxx/ test package. Do you think that it would be possible?::",Nikita Sobolev,4660275,4663,5,15,7,11,1,83b6a1dfa6d406eea5143c29ab90f4efab42fe59::9e35f08cfbb5ca23d46dfce1db1b9d7f22b543e1::077ded83a15e60e1bc3d40a6351383e72cfdb118::8d791b9be95d4906fa2f95b59c4a4c6d3e692a91::44bd3782ed0b949952ccb8f50928e2e1a2d45547::
https://api.github.com/repos/python/cpython,109576,configure_asan::main,0,closed,awaiting review::needs backport to 3.11::needs backport to 3.12::,"When Python is configured to use ASAN, MSAN or UBSAN sanitizer, with ""./configure --with-address-sanitizer"" for example, compiler and linker flags for sanitizers are no longer exported to third party C extensions. Add flags to CFLAGS_NODIST and LDFLAGS_NODIST, instead of BASECFLAGS and LDFLAGS. Makefile.pre.in: PY_LDFLAGS_NOLTO now uses PY_LDFLAGS_NODIST, instead of LDFLAGS_NODIST, and add CONFIGURE_LDFLAGS_NOLTO after PY_LDFLAGS_NODIST. <!-- Thanks for your contribution! Please read this comment in its entirety. It's quite important. # Pull Request title It should be in the following format: ``` gh-NNNNN: Summary of the changes made ``` Where: gh-NNNNN refers to the GitHub issue number. Most PRs will require an issue number. Trivial changes, like fixing a typo, do not need an issue. # Backport Pull Request title If this is a backport PR (PR made against branches other than `main`), please ensure that the PR title is in the following format: ``` [X.Y] <title from the original PR> (GH-NNNN) ``` Where: [X.Y] is the branch name, e.g. [3.6]. GH-NNNN refers to the PR number from `main`. --> <!-- gh-issue-number: gh-109575 --> * Issue: gh-109575 <!-- /gh-issue-number --> ::",Victor Stinner,194129,1148,1,18,13,4,0,a9da37cf02ed9c1f03ffdae3ba3a65e8181100da::
